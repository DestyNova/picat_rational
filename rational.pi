module rational.

import util.

% Recursively apply the function F to X until the result converges (i.e. F(X) == X)
converge(X,F,R), Y = apply(F,X), eq(X,Y) => R = X.
converge(X,F,R) => converge(apply(F,X),F,R).

new_rational(N,Scaling) = $rational(A,B) =>
  S = gcd(N, Scaling),
  A = N // S,
  B = Scaling // S.

add(rational(A,S_a), rational(B,S_b)) = new_rational(A*S_b+B*S_a, S_a*S_b).
sub(rational(A,S_a), rational(B,S_b)) = new_rational(A*S_b-B*S_a, S_a*S_b).
mul(rational(A,S_a), rational(B,S_b)) = new_rational(A*B, S_a*S_b).
divf(rational(A,S_a), rational(B,S_b)) = new_rational(A*S_b, S_a*B). % lame, can't use div/2 :(
eq(rational(A,S_a), rational(B,S_b)) =>
  X = A*S_b,
  Y = B*S_a,
  X = Y.

floor_rational(rational(A,S_a)) = A // S_a.

% Produce string representation of a rational value with a specified precision (digits after the decimal)
stringify(rational(A,Sf), Precision) = R, Precision >= 0 =>
  X = (A * 10**(Precision+1) // Sf),
  Y = cond(X mod 10 > 4, X // 10 + 1, X // 10),
  M = Y.to_string,
  N = A // Sf,
  Int_size = cond(N == 0, 0, floor(log10(Y.abs // 10**Precision)+1)),
  Int_part = cond(A < 0, "-", "") ++ cond(Int_size == 0, "0", M.take(Int_size)),
  Decimal_part = M.drop(Int_size),
  R = Int_part ++ cond(Decimal_part.len == 0, "", "." ++ Decimal_part).

rational_to_float(rational(A,Sf)) = A / Sf.
